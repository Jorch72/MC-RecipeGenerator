buildscript {
    repositories {
        mavenCentral()
	mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
	maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "MC${config.version.minecraft}-F${config.version.forge}_v${config.version.mod.major}.${config.version.mod.minor}${config.version.mod.revis}"
group = "arg"
archivesBaseName = "ARG"

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "run"
    mappings = config.version.mappings
	
	replaceIn "ARG.java"
	replace "@MAJOR@", config.version.mod.major
	replace "@MINOR@", config.version.mod.minor
	replace "@REVIS@", config.version.mod.revis
	
	if (System.getenv("BUILD_NUMBER") != null) {
		replace "@BUILD@", System.getenv("BUILD_NUMBER")
	}
	else
	{
		replace "@BUILD@", "[NIGHTLY]"
	}
	
	if (project.hasProperty("mad_signature")) {
        replace "@FINGERPRINT@", project.mad_signature
	}
}

if (System.getenv("BUILD_NUMBER") != null) {
    version += ".${System.getenv("BUILD_NUMBER")}";
}
else {
	version = "MC${config.version.minecraft}-F${config.version.forge}_[NIGHTLY]"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude '*.psd'
    }
}

jar {
    classifier = 'universal'
    destinationDir = file 'output'
    manifest {
        attributes "Implementation-Version": version
        attributes "FMLAT": 'arg_at.cfg'
    }
}

wrapper {
    version = "2.0"
}